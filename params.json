{"name":"Comparator","tagline":"Scala/Java Json/Xml tree comparator. Main aim is to use such comparator in unit/functional/regression testing. ","body":"[![Build Status](https://travis-ci.org/ximagination80/Comparator.png)](https://travis-ci.org/ximagination80/Comparator)\r\n[![codecov.io](https://codecov.io/github/ximagination80/Comparator/coverage.svg?branch=master)](https://codecov.io/github/ximagination80/Comparator?branch=master)\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ximagination80/Comparator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n[![License](http://img.shields.io/:license-Apache%202-red.svg)](http://www.apache.org/licenses/LICENSE-2.0.txt)\r\n# Xml,Json template comparator\r\n\r\n#License\r\nThe Apache License.\r\n\r\n# Usage\r\n\r\n* Unit testing (can replace assert)\r\n* Functional testing\r\n* Regression testing\r\n\r\n# Assert list\r\n\r\n* Incorrect types (Expected Null but was String etc)\r\n* Incorrect field name\r\n* Incorrect field value ( Equals or Pattern )\r\n* Incorrect array length\r\n* Field is missing\r\n\r\n## Dependency\r\n\r\n```scala\r\n\"imagination\" % \"comparator_2.11\" % \"0.5-SNAPSHOT\" % \"test\"\r\n```\r\nor\r\n\r\n```scala\r\n <dependency>\r\n    <groupId>imagination</groupId>\r\n    <artifactId>comparator_2.11</artifactId>\r\n    <version>0.5-SNAPSHOT</version>\r\n    <scope>test</scope>\r\n </dependency>\r\n```\r\n==\r\n## Installation\r\n\r\n* git clone https://github.com/ximagination80/Comparator.git\r\n* cd Comparator\r\n* sbt publishLocal publishM2  (publishing into [ivy,m2] repo)\r\n\r\n### Dependency list\r\n\r\n* \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.6.3\"\r\n* \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.6.3\"\r\n\r\n==\r\n### How to use:\r\n\r\n* Comparator.strict.compare(\"a\",\"b\") or Comparator(mode = Strict).compare(\"a\",\"b\")\r\n* Comparator.lenient.compare(\"a\",\"b\") or Comparator(mode = Lenient).compare(\"a\",\"b\")\r\n\r\n==\r\nUsage:\r\n\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Strict).compare(\r\n  \"\"\"\r\n    {\"name\":\"p([a-z]+)\",\"date\":\"p(\\\\d{4}-\\\\d{2}-\\\\d{2})\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"name\":\"imagination\",\"date\":\"2015-11-01\"}\r\n  \"\"\")\r\n```\r\n  match ( Comparator won't throw ComparisonError )\r\n\r\n* Will compare name by pattern template [a-z]+ (Pattern.DOTALL flag)\r\n* Will compare date by pattern template \\\\d{4}-\\\\d{2}-\\\\d{2} (Pattern.DOTALL flag)\r\n\r\n==\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Strict).compare(\r\n  \"\"\"\r\n    {\"name\":\"p([a-z]+)\",\"date\":\"2015-11-01\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"name\":\"imagination\",\"date\":\"2015-11-01\"}\r\n  \"\"\")\r\n```\r\n  match ( Comparator won't throw ComparisonError )\r\n\r\n* Will compare name by pattern template [a-z]+ (Pattern.DOTALL flag)\r\n* Will compare date by equals strategy\r\n\r\n==\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Strict).compare(\r\n  \"\"\"\r\n    {\"name\":\"p([a-z]+)\",\"date\":\"p(.*)\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"name\":\"imagination\",\"date\":\"blah or 01-01-2015\"}\r\n  \"\"\")\r\n```\r\n  match ( Comparator won't throw ComparisonError )\r\n\r\n* Will compare name by pattern template [a-z]+ (Pattern.DOTALL flag)\r\n* Field \"date\" should present with any string value\r\n\r\n==\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Strict).compare(\r\n  \"\"\"\r\n    {\"name\":\"p([a-z]+)\",\"date\":\"p(\\\\d{4}-\\\\d{2}-\\\\d{2})\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"name\":\"imagination\",\"date\":\"01-01-2015\"}\r\n  \"\"\")\r\n```\r\n  not match because \"date\" field template isn't correct ( Comparator will throw ComparisonError)\r\n\r\n==\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Lenient).compare(\r\n  \"\"\"\r\n    {\"date\":\"p(\\\\d{4}-\\\\d{2}-\\\\d{2})\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"name\":\"imagination\",\"date\":\"01-01-2015\"}\r\n  \"\"\")\r\n```\r\n  match. ( Comparator won't throw ComparisonError )\r\n\r\n* Field \"date\" should present and it should match pattern \\\\d{4}-\\\\d{2}-\\\\d{2})\r\n\r\n==\r\n```scala\r\n  import comparator._\r\n\r\n  Comparator(mode = Lenient).compare(\r\n  \"\"\"\r\n    {\"date\":\"p(\\\\d{4}-\\\\d{2}-\\\\d{2})\", \"fields\":\r\n          [\r\n            {\r\n              \"field1\":\"name\",\r\n              \"type\":\"int\"\r\n            },\r\n            {\r\n               \"field2\":\"surname\",\r\n               \"type\":\"string\"\r\n            }, {}\r\n      ]\r\n    }\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"date\":\"2015-11-11\", \"fields\":\r\n          [\r\n            {\r\n              \"field1\":\"name\",\r\n              \"type\":\"int\",\r\n              \"default\": \"0\"\r\n            },\r\n            {\r\n              \"field2\":\"surname\",\r\n              \"type\":\"string\",\r\n              \"default\": \"\"\r\n            },\r\n            {\r\n              \"field2\":\"surname\",\r\n              \"type\":\"string\",\r\n              \"default\": \"\"\r\n            }\r\n          ] \r\n    }\r\n  \"\"\")\r\n```\r\n  match. \r\n  \r\n* Assert \"date\" pattern\r\n* Assert \"date\" / \"fields\" column names\r\n* Assert \"fields\" array length\r\n* Assert each array object and ignore \"default\" column\r\n\r\n# Additional features\r\n\r\n* Custom pattern registration\r\n\r\n```scala\r\nimport comparator._\r\n\r\nimplicit val aliases = AliasMap().\r\n    add(\"date\",\"\\\\d{4}-\\\\d{2}-\\\\d{2}\").\r\n    add(\"number\", Pattern.compile(\"\\\\d+\"))\r\n\r\nComparator.strict.compare(\r\n  \"\"\"\r\n    {\"date\":\"p(date)\", \"cost\":\"p(number)\"}\r\n  \"\"\",\r\n  \"\"\"\r\n    {\"date\":\"2015-11-11\", \"cost\":\"100\"}\r\n  \"\"\")\r\n```\r\n\r\n* Java support   (see examples)\r\n```java\r\n  package root;\r\n\r\n  import comparator.Comparator;\r\n  import org.junit.Test;\r\n\r\n  import java.util.HashMap;\r\n  import java.util.Map;\r\n  import java.util.regex.Pattern;\r\n\r\n  public class ComparatorTest {\r\n\r\n      private static final Map<String, Pattern> ALIASES = new HashMap<String, Pattern>() {\r\n          {\r\n              put(\"digit\", Pattern.compile(\"\\\\d+\"));\r\n          }\r\n      };\r\n\r\n      private static Comparator createComparator() {\r\n          return Comparator.java().strict(ALIASES);\r\n      }\r\n\r\n      @Test\r\n      public void matches() throws Exception {\r\n          String expected = \"{\\\"count\\\":\\\"p(digit)\\\"}\";\r\n          String actual = \"{\\\"count\\\":\\\"120\\\"}\";\r\n\r\n          createComparator().compare(expected, actual);\r\n      }\r\n  }\r\n\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}